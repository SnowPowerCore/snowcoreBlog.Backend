// <auto-generated/>
#pragma warning disable
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;
using snowcoreBlog.Backend.IAM.Core.Entities;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertApplicationUserEntityOperation1006100899
    public class UpsertApplicationUserEntityOperation1006100899 : Marten.Internal.Operations.StorageOperation<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>
    {
        private readonly snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertApplicationUserEntityOperation1006100899(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_upsert_applicationuserentity(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;

            if (document.Id != null)
            {
                var parameter2 = parameterBuilder.AppendParameter(document.Id);
                parameter2.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;
            }

            else
            {
                var parameter2 = parameterBuilder.AppendParameter<object>(System.DBNull.Value);
            }

            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpsertApplicationUserEntityOperation1006100899
    
    
    // START: InsertApplicationUserEntityOperation1006100899
    public class InsertApplicationUserEntityOperation1006100899 : Marten.Internal.Operations.StorageOperation<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>
    {
        private readonly snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertApplicationUserEntityOperation1006100899(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_insert_applicationuserentity(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;

            if (document.Id != null)
            {
                var parameter2 = parameterBuilder.AppendParameter(document.Id);
                parameter2.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;
            }

            else
            {
                var parameter2 = parameterBuilder.AppendParameter<object>(System.DBNull.Value);
            }

            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: InsertApplicationUserEntityOperation1006100899
    
    
    // START: UpdateApplicationUserEntityOperation1006100899
    public class UpdateApplicationUserEntityOperation1006100899 : Marten.Internal.Operations.StorageOperation<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>
    {
        private readonly snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateApplicationUserEntityOperation1006100899(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_update_applicationuserentity(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;

            if (document.Id != null)
            {
                var parameter2 = parameterBuilder.AppendParameter(document.Id);
                parameter2.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;
            }

            else
            {
                var parameter2 = parameterBuilder.AppendParameter<object>(System.DBNull.Value);
            }

            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpdateApplicationUserEntityOperation1006100899
    
    
    // START: QueryOnlyApplicationUserEntitySelector1006100899
    public class QueryOnlyApplicationUserEntitySelector1006100899 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyApplicationUserEntitySelector1006100899(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity Resolve(System.Data.Common.DbDataReader reader)
        {

            snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document;
            document = _serializer.FromJson<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document;
            document = await _serializer.FromJsonAsync<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyApplicationUserEntitySelector1006100899
    
    
    // START: LightweightApplicationUserEntitySelector1006100899
    public class LightweightApplicationUserEntitySelector1006100899 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>, Marten.Linq.Selectors.ISelector<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightApplicationUserEntitySelector1006100899(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);

            snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document;
            document = _serializer.FromJson<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);

            snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document;
            document = await _serializer.FromJsonAsync<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightApplicationUserEntitySelector1006100899
    
    
    // START: IdentityMapApplicationUserEntitySelector1006100899
    public class IdentityMapApplicationUserEntitySelector1006100899 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>, Marten.Linq.Selectors.ISelector<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapApplicationUserEntitySelector1006100899(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document;
            document = _serializer.FromJson<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document;
            document = await _serializer.FromJsonAsync<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapApplicationUserEntitySelector1006100899
    
    
    // START: DirtyTrackingApplicationUserEntitySelector1006100899
    public class DirtyTrackingApplicationUserEntitySelector1006100899 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>, Marten.Linq.Selectors.ISelector<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingApplicationUserEntitySelector1006100899(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document;
            document = _serializer.FromJson<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document;
            document = await _serializer.FromJsonAsync<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingApplicationUserEntitySelector1006100899
    
    
    // START: QueryOnlyApplicationUserEntityDocumentStorage1006100899
    public class QueryOnlyApplicationUserEntityDocumentStorage1006100899 : Marten.Internal.Storage.QueryOnlyDocumentStorage<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyApplicationUserEntityDocumentStorage1006100899(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Id)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateApplicationUserEntityOperation1006100899
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertApplicationUserEntityOperation1006100899
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertApplicationUserEntityOperation1006100899
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyApplicationUserEntitySelector1006100899(session, _document);
        }


        public override object RawIdentityValue(string id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.String[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: QueryOnlyApplicationUserEntityDocumentStorage1006100899
    
    
    // START: LightweightApplicationUserEntityDocumentStorage1006100899
    public class LightweightApplicationUserEntityDocumentStorage1006100899 : Marten.Internal.Storage.LightweightDocumentStorage<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightApplicationUserEntityDocumentStorage1006100899(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Id)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateApplicationUserEntityOperation1006100899
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertApplicationUserEntityOperation1006100899
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertApplicationUserEntityOperation1006100899
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightApplicationUserEntitySelector1006100899(session, _document);
        }


        public override object RawIdentityValue(string id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.String[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: LightweightApplicationUserEntityDocumentStorage1006100899
    
    
    // START: IdentityMapApplicationUserEntityDocumentStorage1006100899
    public class IdentityMapApplicationUserEntityDocumentStorage1006100899 : Marten.Internal.Storage.IdentityMapDocumentStorage<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapApplicationUserEntityDocumentStorage1006100899(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Id)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateApplicationUserEntityOperation1006100899
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertApplicationUserEntityOperation1006100899
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertApplicationUserEntityOperation1006100899
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapApplicationUserEntitySelector1006100899(session, _document);
        }


        public override object RawIdentityValue(string id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.String[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: IdentityMapApplicationUserEntityDocumentStorage1006100899
    
    
    // START: DirtyTrackingApplicationUserEntityDocumentStorage1006100899
    public class DirtyTrackingApplicationUserEntityDocumentStorage1006100899 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingApplicationUserEntityDocumentStorage1006100899(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Id)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateApplicationUserEntityOperation1006100899
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertApplicationUserEntityOperation1006100899
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertApplicationUserEntityOperation1006100899
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingApplicationUserEntitySelector1006100899(session, _document);
        }


        public override object RawIdentityValue(string id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.String[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: DirtyTrackingApplicationUserEntityDocumentStorage1006100899
    
    
    // START: ApplicationUserEntityBulkLoader1006100899
    public class ApplicationUserEntityBulkLoader1006100899 : Marten.Internal.CodeGeneration.BulkLoader<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string> _storage;

        public ApplicationUserEntityBulkLoader1006100899(Marten.Internal.Storage.IDocumentStorage<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity, string> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_applicationuserentity(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_applicationuserentity_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_applicationuserentity (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", \"mt_deleted\", \"mt_deleted_at\", mt_last_modified) (select mt_doc_applicationuserentity_temp.\"id\", mt_doc_applicationuserentity_temp.\"data\", mt_doc_applicationuserentity_temp.\"mt_version\", mt_doc_applicationuserentity_temp.\"mt_dotnet_type\", mt_doc_applicationuserentity_temp.\"mt_deleted\", mt_doc_applicationuserentity_temp.\"mt_deleted_at\", transaction_timestamp() from mt_doc_applicationuserentity_temp left join public.mt_doc_applicationuserentity on mt_doc_applicationuserentity_temp.id = public.mt_doc_applicationuserentity.id where public.mt_doc_applicationuserentity.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_applicationuserentity target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_deleted = source.mt_deleted, mt_deleted_at = source.mt_deleted_at, mt_last_modified = transaction_timestamp() FROM mt_doc_applicationuserentity_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_applicationuserentity_temp (like public.mt_doc_applicationuserentity including defaults)";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Text);
            writer.Write(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Text, cancellation);
            await writer.WriteAsync(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: ApplicationUserEntityBulkLoader1006100899
    
    
    // START: ApplicationUserEntityProvider1006100899
    public class ApplicationUserEntityProvider1006100899 : Marten.Internal.Storage.DocumentProvider<snowcoreBlog.Backend.IAM.Core.Entities.ApplicationUserEntity>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public ApplicationUserEntityProvider1006100899(Marten.Schema.DocumentMapping mapping) : base(new ApplicationUserEntityBulkLoader1006100899(new QueryOnlyApplicationUserEntityDocumentStorage1006100899(mapping)), new QueryOnlyApplicationUserEntityDocumentStorage1006100899(mapping), new LightweightApplicationUserEntityDocumentStorage1006100899(mapping), new IdentityMapApplicationUserEntityDocumentStorage1006100899(mapping), new DirtyTrackingApplicationUserEntityDocumentStorage1006100899(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: ApplicationUserEntityProvider1006100899
    
    
}

