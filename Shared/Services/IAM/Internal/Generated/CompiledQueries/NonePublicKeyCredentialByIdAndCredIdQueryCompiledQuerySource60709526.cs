// <auto-generated/>
#pragma warning disable
using Marten.Linq.QueryHandlers;
using System;
using snowcoreBlog.Backend.IAM.CompiledQueries.Marten;

namespace Marten.Generated.CompiledQueries
{
    // START: NonePublicKeyCredentialByIdAndCredIdQueryCompiledQuery60709526
    public class NonePublicKeyCredentialByIdAndCredIdQueryCompiledQuery60709526 : Marten.Internal.CompiledQueries.ComplexCompiledQuery<bool, snowcoreBlog.Backend.IAM.CompiledQueries.Marten.PublicKeyCredentialByIdAndCredIdQuery>
    {
        private readonly Marten.Linq.QueryHandlers.IMaybeStatefulHandler _inner;
        private readonly snowcoreBlog.Backend.IAM.CompiledQueries.Marten.PublicKeyCredentialByIdAndCredIdQuery _query;

        public NonePublicKeyCredentialByIdAndCredIdQueryCompiledQuery60709526(Marten.Linq.QueryHandlers.IMaybeStatefulHandler inner, snowcoreBlog.Backend.IAM.CompiledQueries.Marten.PublicKeyCredentialByIdAndCredIdQuery query) : base(inner, query)
        {
            _inner = inner;
            _query = query;
        }



        public override void ConfigureCommand(Weasel.Postgresql.ICommandBuilder builder, Marten.Internal.IMartenSession session)
        {
            var parameters1 = builder.AppendWithParameters(@"select TRUE as result from public.mt_doc_fido2publickeycredentialentity as d where (d.mt_deleted = False and d.id = ^ and CAST(d.data ->> 'PublicKeyCredentialId' as jsonb) is null) LIMIT ^;", '^');

            parameters1[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters1[0].Value = _query.Id;
            parameters1[1].Value = 1;
            parameters1[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Integer;
        }


        public override Marten.Linq.QueryHandlers.IQueryHandler<bool> BuildHandler(Marten.Internal.IMartenSession session)
        {
            var includeWriters = new Marten.Linq.Includes.IIncludeReader[]{Marten.Linq.Includes.Include.ReaderToList(session, _query.PublicKeyCredentialId)};
            var included = new Marten.Linq.Includes.IncludeQueryHandler<bool>((Marten.Linq.QueryHandlers.IQueryHandler<bool>)_inner, includeWriters);
            return included;
        }

    }

    // END: NonePublicKeyCredentialByIdAndCredIdQueryCompiledQuery60709526
    
    
    // START: NonePublicKeyCredentialByIdAndCredIdQueryCompiledQuerySource60709526
    public class NonePublicKeyCredentialByIdAndCredIdQueryCompiledQuerySource60709526 : Marten.Internal.CompiledQueries.CompiledQuerySource<bool, snowcoreBlog.Backend.IAM.CompiledQueries.Marten.PublicKeyCredentialByIdAndCredIdQuery>
    {
        private readonly Marten.Linq.QueryHandlers.IMaybeStatefulHandler _maybeStatefulHandler;

        public NonePublicKeyCredentialByIdAndCredIdQueryCompiledQuerySource60709526(Marten.Linq.QueryHandlers.IMaybeStatefulHandler maybeStatefulHandler)
        {
            _maybeStatefulHandler = maybeStatefulHandler;
        }



        public override Marten.Linq.QueryHandlers.IQueryHandler<bool> BuildHandler(snowcoreBlog.Backend.IAM.CompiledQueries.Marten.PublicKeyCredentialByIdAndCredIdQuery query, Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.CompiledQueries.NonePublicKeyCredentialByIdAndCredIdQueryCompiledQuery60709526(_maybeStatefulHandler, query);
        }

    }

    // END: NonePublicKeyCredentialByIdAndCredIdQueryCompiledQuerySource60709526
    
    
}

