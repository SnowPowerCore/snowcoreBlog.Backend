// <auto-generated/>
#pragma warning disable
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;
using snowcoreBlog.Backend.ReadersManagement.Entities.Reader;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertReaderEntityOperation659916285
    public class UpsertReaderEntityOperation659916285 : Marten.Internal.Operations.StorageOperation<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>
    {
        private readonly snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertReaderEntityOperation659916285(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_upsert_readerentity(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpsertReaderEntityOperation659916285
    
    
    // START: InsertReaderEntityOperation659916285
    public class InsertReaderEntityOperation659916285 : Marten.Internal.Operations.StorageOperation<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>
    {
        private readonly snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertReaderEntityOperation659916285(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_insert_readerentity(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: InsertReaderEntityOperation659916285
    
    
    // START: UpdateReaderEntityOperation659916285
    public class UpdateReaderEntityOperation659916285 : Marten.Internal.Operations.StorageOperation<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>
    {
        private readonly snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateReaderEntityOperation659916285(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_update_readerentity(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpdateReaderEntityOperation659916285
    
    
    // START: QueryOnlyReaderEntitySelector659916285
    public class QueryOnlyReaderEntitySelector659916285 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyReaderEntitySelector659916285(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity Resolve(System.Data.Common.DbDataReader reader)
        {

            snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document;
            document = _serializer.FromJson<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document;
            document = await _serializer.FromJsonAsync<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyReaderEntitySelector659916285
    
    
    // START: LightweightReaderEntitySelector659916285
    public class LightweightReaderEntitySelector659916285 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>, Marten.Linq.Selectors.ISelector<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightReaderEntitySelector659916285(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);

            snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document;
            document = _serializer.FromJson<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);

            snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document;
            document = await _serializer.FromJsonAsync<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightReaderEntitySelector659916285
    
    
    // START: IdentityMapReaderEntitySelector659916285
    public class IdentityMapReaderEntitySelector659916285 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>, Marten.Linq.Selectors.ISelector<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapReaderEntitySelector659916285(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document;
            document = _serializer.FromJson<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document;
            document = await _serializer.FromJsonAsync<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapReaderEntitySelector659916285
    
    
    // START: DirtyTrackingReaderEntitySelector659916285
    public class DirtyTrackingReaderEntitySelector659916285 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>, Marten.Linq.Selectors.ISelector<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingReaderEntitySelector659916285(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document;
            document = _serializer.FromJson<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document;
            document = await _serializer.FromJsonAsync<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingReaderEntitySelector659916285
    
    
    // START: QueryOnlyReaderEntityDocumentStorage659916285
    public class QueryOnlyReaderEntityDocumentStorage659916285 : Marten.Internal.Storage.QueryOnlyDocumentStorage<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyReaderEntityDocumentStorage659916285(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateReaderEntityOperation659916285
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertReaderEntityOperation659916285
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertReaderEntityOperation659916285
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyReaderEntitySelector659916285(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: QueryOnlyReaderEntityDocumentStorage659916285
    
    
    // START: LightweightReaderEntityDocumentStorage659916285
    public class LightweightReaderEntityDocumentStorage659916285 : Marten.Internal.Storage.LightweightDocumentStorage<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightReaderEntityDocumentStorage659916285(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateReaderEntityOperation659916285
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertReaderEntityOperation659916285
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertReaderEntityOperation659916285
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightReaderEntitySelector659916285(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: LightweightReaderEntityDocumentStorage659916285
    
    
    // START: IdentityMapReaderEntityDocumentStorage659916285
    public class IdentityMapReaderEntityDocumentStorage659916285 : Marten.Internal.Storage.IdentityMapDocumentStorage<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapReaderEntityDocumentStorage659916285(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateReaderEntityOperation659916285
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertReaderEntityOperation659916285
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertReaderEntityOperation659916285
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapReaderEntitySelector659916285(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: IdentityMapReaderEntityDocumentStorage659916285
    
    
    // START: DirtyTrackingReaderEntityDocumentStorage659916285
    public class DirtyTrackingReaderEntityDocumentStorage659916285 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingReaderEntityDocumentStorage659916285(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateReaderEntityOperation659916285
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertReaderEntityOperation659916285
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertReaderEntityOperation659916285
            (
                document, Identity(document),
                session.Versions.ForType<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingReaderEntitySelector659916285(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: DirtyTrackingReaderEntityDocumentStorage659916285
    
    
    // START: ReaderEntityBulkLoader659916285
    public class ReaderEntityBulkLoader659916285 : Marten.Internal.CodeGeneration.BulkLoader<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid> _storage;

        public ReaderEntityBulkLoader659916285(Marten.Internal.Storage.IDocumentStorage<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity, System.Guid> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_readerentity(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_readerentity_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_readerentity (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", \"mt_deleted\", \"mt_deleted_at\", mt_last_modified) (select mt_doc_readerentity_temp.\"id\", mt_doc_readerentity_temp.\"data\", mt_doc_readerentity_temp.\"mt_version\", mt_doc_readerentity_temp.\"mt_dotnet_type\", mt_doc_readerentity_temp.\"mt_deleted\", mt_doc_readerentity_temp.\"mt_deleted_at\", transaction_timestamp() from mt_doc_readerentity_temp left join public.mt_doc_readerentity on mt_doc_readerentity_temp.id = public.mt_doc_readerentity.id where public.mt_doc_readerentity.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_readerentity target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_deleted = source.mt_deleted, mt_deleted_at = source.mt_deleted_at, mt_last_modified = transaction_timestamp() FROM mt_doc_readerentity_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_readerentity_temp (like public.mt_doc_readerentity including defaults)";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: ReaderEntityBulkLoader659916285
    
    
    // START: ReaderEntityProvider659916285
    public class ReaderEntityProvider659916285 : Marten.Internal.Storage.DocumentProvider<snowcoreBlog.Backend.ReadersManagement.Entities.Reader.ReaderEntity>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public ReaderEntityProvider659916285(Marten.Schema.DocumentMapping mapping) : base(new ReaderEntityBulkLoader659916285(new QueryOnlyReaderEntityDocumentStorage659916285(mapping)), new QueryOnlyReaderEntityDocumentStorage659916285(mapping), new LightweightReaderEntityDocumentStorage659916285(mapping), new IdentityMapReaderEntityDocumentStorage659916285(mapping), new DirtyTrackingReaderEntityDocumentStorage659916285(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: ReaderEntityProvider659916285
    
    
}

